options {
       	directory "/var/bind";

       	allow-recursion { any; };

       	// If you want this resolver to itself resolve via means of another recursive
       	// resolver, uncomment this block and specify the IP addresses of the desired
       	// upstream resolvers.
       	//forwarders {
       	//     	123.123.123.123;
       	//     	123.123.123.123;
       	//};

       	// By default the resolver will attempt to perform recursive resolution itself
       	// if the forwarders are unavailable. If you want this resolver to fail outright
       	// if the upstream resolvers are unavailable, uncomment this directive.
       	//forward only;

       	// Configure the IPs to listen on here.
       	listen-on { any; };
       	listen-on-v6 { none; };

       	// If you have problems and are behind a firewall:
       	//query-source address * port 53;

       	pid-file "/var/run/named/named.pid";

       	// Removing this block will cause BIND to revert to its default behaviour
       	// of allowing zone transfers to any host (!). There is no need to allow zone
       	// transfers when operating as a recursive resolver.
       	allow-transfer { none; };
};

// Briefly, a zone which has been declared delegation-only will be effectively
// limited to containing NS RRs for subdomains, but no actual data beyond its
// own apex (for example, its SOA RR and apex NS RRset). This can be used to
// filter out "wildcard" or "synthesized" data from NAT boxes or from
// authoritative name servers whose undelegated (in-zone) data is of no
// interest.
// See http://www.isc.org/products/BIND/delegation-only.html for more info

//zone "COM" { type delegation-only; };
//zone "NET" { type delegation-only; };

zone "." IN {
       	type hint;
       	file "named.ca";
};

zone "localhost" IN {
       	type master;
       	file "pri/localhost.zone";
       	allow-update { none; };
       	notify no;
};

zone "127.in-addr.arpa" IN {
       	type master;
       	file "pri/127.zone";
       	allow-update { none; };
       	notify no;
};
